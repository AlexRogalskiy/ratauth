buildscript {
  ext {
    springBootVersion = '1.3.0.RC1'
  }
  repositories {
    jcenter()
    mavenCentral()
    maven { url "https://repo.spring.io/milestone" }
  }
  dependencies {
    classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    classpath 'com.netflix.nebula:gradle-extra-configurations-plugin:2.2.+'
  }
}

group = "ru.rauth"
version = "0.0.1"

allprojects {
  apply plugin: 'idea'
  apply plugin: 'io.spring.dependency-management'
  apply plugin: 'provided-base'

  repositories {
    mavenCentral()
    jcenter()
    maven { url "https://repo.spring.io/milestone" }
  }

  dependencyManagement {
    imports {
      mavenBom 'io.spring.platform:platform-bom:2.0.0.RC1'
    }

    dependencies {
      dependency 'com.google.guava:guava:18.0'
      dependency 'org.codehaus.groovy:groovy-all:2.4.5'
      dependency 'org.spockframework:spock-core:1.0-groovy-2.4'
      dependency 'org.spockframework:spock-spring:1.0-groovy-2.4'
    }
  }
}

subprojects {
  apply plugin: 'java'
  apply plugin: 'groovy'
  apply plugin: 'spring-boot'

  sourceCompatibility = 1.8
  targetCompatibility = 1.8

  jar {
    archiveName = project.name + ".jar"
  }


  dependencies {
    compile 'org.codehaus.groovy:groovy-all'
    compile 'com.google.guava:guava'

    provided 'org.projectlombok:lombok'

    testCompile 'org.springframework.boot:spring-boot-starter-test'
    testCompile 'org.spockframework:spock-core', {
      exclude module: "groovy-all"
    }
    testCompile 'org.spockframework:spock-spring', {
      exclude module: "groovy-all"
    }
  }

  task dockerBuild << {
    exec {
      commandLine 'docker', 'build', '--force-rm=true', "--tag='${project.name}'", '.'
    }
  }

  dockerBuild.dependsOn build

  springBoot {
    executable = true
  }
}

task wrapper(type: Wrapper) {
  gradleVersion = '2.8'
}

idea {
  project {
    jdkName "1.8"
    languageLevel "1.8"
    ipr {
      withXml { provider ->
        def node = provider.asNode()
        //configure git support for the project in idea
        node.component.find { it.'@name' == 'VcsDirectoryMappings' }?.mapping[0].'@vcs' = 'Git'
      }
    }
  }
}